{"version":3,"sources":["Todo.js","store/actions/actions.js","routes.js","components/header.js","App.js","store/TodoReducer.js","store/index.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","width","Todo","classes","todoDispatch","useDispatch","useState","isRequested","setIsRequested","todo","setTodo","id","isCompleted","todoInfo","setTodoInfo","todos","useSelector","state","completed","filter","n_completed","useEffect","dispatch","fetch","then","res","json","type","payload","requestOptions","method","headers","body","JSON","stringify","message","result","update_todos","sendRequest","useCallback","trim","length","alert","add_todo","className","noValidate","autoComplete","TextField","inputProps","maxLength","onChange","e","target","value","onKeyPress","key","label","variant","Fab","color","aria-label","onDragEnd","destination","destination_id","droppableId","source_id","source","draggableId","provided","droppableProps","ref","innerRef","map","index","_id","draggableProps","dragHandleProps","Checkbox","checked","placeholder","Routes","exact","path","component","Header","App","initialState","reducer","action","combineReducers","todoReducer","store","createStore","applyMiddleware","thunk","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.912e26c4.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetch_todos, add_todo, update_todos } from './store/actions/actions';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport WorkOutlineIcon from '@material-ui/icons/WorkOutline';\r\n\r\n\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport './todo.css'\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '350px',\r\n\r\n        },\r\n    },\r\n}));\r\n\r\nfunction Todo() {\r\n    const classes = useStyles();\r\n    const todoDispatch = useDispatch();\r\n    const [isRequested, setIsRequested] = useState(false);\r\n    const [todo, setTodo] = useState('');\r\n    const [todoInfo, setTodoInfo] = useState({\r\n        id: null,\r\n        isCompleted: false\r\n    });\r\n    const { todos } = useSelector(state => state.todo);\r\n\r\n    function handleOnDragEnd(result) {\r\n        if (result.destination == null) return;\r\n        let destination_id = result.destination.droppableId;\r\n        let source_id = result.source.droppableId;\r\n        if (!result.destination) return;\r\n        if (destination_id === \"completed\" && source_id === \"n-completed\") {\r\n            setTodoInfo({ ...todoInfo, isCompleted: false, id: result.draggableId })\r\n        }\r\n        if (destination_id === \"n-completed\" && source_id === \"completed\") {\r\n            setTodoInfo({ ...todoInfo, isCompleted: true, id: result.draggableId })\r\n        }\r\n    }\r\n    let completed = todos && todos.filter(todo => todo.isCompleted === false);\r\n    let n_completed = todos && todos.filter(todo => todo.isCompleted === true);\r\n    useEffect(() => {\r\n        todoDispatch(fetch_todos())\r\n    }, [isRequested])\r\n    useEffect(() => {\r\n        todoInfo.id && todoDispatch(update_todos(todoInfo.id, todoInfo.isCompleted))\r\n        setIsRequested(!isRequested);\r\n    }, [todoInfo])\r\n\r\n    const sendRequest = useCallback(() => {\r\n        if (todo.trim().length == 0) {\r\n            alert(\"todo cant be empty\")\r\n        } else {\r\n            setIsRequested(!isRequested)\r\n            todoDispatch(add_todo(todo))\r\n            setIsRequested(!isRequested)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div>\r\n          \r\n            <div className=\"add-bar-container\">\r\n                <form className={classes.root} noValidate autoComplete=\"off\">\r\n                    <TextField id=\"outlined-basic\" inputProps={{ maxLength: 450 }} onChange={(e) => setTodo(e.target.value)} onKeyPress={e => {\r\n                        if (e.key === 'Enter') {\r\n                            sendRequest() \r\n                        }\r\n                    }} label=\"todo\" variant=\"outlined\" />\r\n                </form>\r\n                <Fab color=\"primary\" className=\"add-icon\" aria-label=\"add\">\r\n                    <WorkOutlineIcon />\r\n                </Fab>\r\n            </div>\r\n            <div className=\"main-container\">\r\n                <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                    <Droppable droppableId={\"n-completed\"}>\r\n                        {(provided) => (\r\n                            <div className=\"n-completed-container\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                                <h2>To-do</h2>\r\n                                {completed && completed.map((todo, index) =>\r\n\r\n                                    <Draggable key={todo._id} draggableId={todo._id} index={index}>\r\n                                        {(provided) => (\r\n                                            <div className=\"todos-content\" {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\r\n                                                <div className=\"todos-rows\">\r\n                                                    <Checkbox\r\n                                                        checked={todo.isCompleted}\r\n                                                        value={todo.isCompleted}\r\n                                                        onChange={(e) => setTodoInfo({ ...todoInfo, isCompleted: todo.isCompleted, id: todo._id })}\r\n                                                        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                                    />\r\n                                                    <p className={todo.isCompleted ? \"completed\" : \"n-completed\"}>{todo.todo}</p>\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n\r\n                                    </Draggable>\r\n                                )}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n\r\n                    <div className=\"completed-container\">\r\n                        <h2>Completed</h2>\r\n                        <Droppable droppableId={\"completed\"}>\r\n                            {(provided) => (\r\n                                <div className=\"todos-container\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {n_completed && n_completed.map((todo, index) =>\r\n\r\n                                        <Draggable key={todo._id} draggableId={todo._id} index={index}>\r\n                                            {(provided) => (\r\n                                                <div className=\"todos-content\" {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\r\n                                                    <div className=\"todos-rows\">\r\n                                                        <Checkbox\r\n                                                            checked={todo.isCompleted}\r\n                                                            value={todo.isCompleted}\r\n                                                            onChange={(e) => setTodoInfo({ ...todoInfo, isCompleted: todo.isCompleted, id: todo._id })}\r\n                                                            inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                                        />\r\n                                                        <p className={todo.isCompleted ? \"completed\" : \"n-completed\"}>{todo.todo}</p>\r\n\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n\r\n                                        </Draggable>\r\n                                    )}\r\n                                    {provided.placeholder}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </div>\r\n\r\n                </DragDropContext>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Todo","\r\nexport const fetch_todos = () => {\r\n    return dispatch => {\r\n        return fetch(`https://enigmatic-dawn-93869.herokuapp.com/api`)\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                dispatch({\r\n                    type: 'FETCH_SUCCESS', payload: {        \r\n                        todos: json.todos\r\n                    }\r\n\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const add_todo = (todo) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ todo, isCompleted: false })\r\n    };\r\n    return dispatch => {\r\n        return fetch(`https://enigmatic-dawn-93869.herokuapp.com/api/addTodo`,requestOptions)\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                dispatch({\r\n                    type: 'TODO_ADDED_SUCCESSFUL', payload: {        \r\n                        message: json.result\r\n                    }\r\n\r\n                })\r\n            })\r\n    }\r\n}\r\nexport const update_todos = (id,isCompleted) => {\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({isCompleted:!isCompleted })\r\n    };\r\n    return dispatch => {\r\n        return fetch(`https://enigmatic-dawn-93869.herokuapp.com/api/todos/${id}`,requestOptions)\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                dispatch({\r\n                    type: 'TODO_UPDATED_SUCCESSFUL', payload: {        \r\n                        message:json.result\r\n                    }\r\n\r\n                })\r\n            })\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom';\r\nimport Todo from './Todo'\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Todo} />\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default Routes;\r\n","import React from 'react'\r\n\r\nfunction Header () {\r\n    return (\r\n        <h1 className=\"header\">Todo App</h1>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n","import './App.css';\nimport Routes from './routes'\nimport Header from './components/header'\nfunction App() {\n  return (\n    <div>\n      <Header/>\n        <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {\r\n  todos: null,\r\n  message: null\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_SUCCESS':\r\n      return {\r\n        ...state,\r\n        todos: action.payload.todos\r\n      }\r\n    case 'FETCH_ERROR':\r\n      return {\r\n        ...state,\r\n        todos: null,\r\n        message:\"error\"\r\n      }\r\n    case 'TODO_ADDED_SUCCESSFUL':\r\n      return {\r\n        ...state,\r\n        message: action.payload.message\r\n      }\r\n    case 'TODO_UPDATED_SUCCESSFUL':\r\n      return {\r\n        ...state,\r\n        todos: action.payload.todos,\r\n        message: \"success\"\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer;","import todoReducer from './TodoReducer';\r\n\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n    todo: todoReducer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport './index.css';\nimport App from './App';\nimport reducer from \"./store/index.js\";\nimport thunk from \"redux-thunk\"\n\n\nconst store = createStore(reducer,applyMiddleware(thunk));\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);"],"sourceRoot":""}